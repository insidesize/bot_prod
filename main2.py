import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton

from database import init_db, save_audit, get_all_audits, mark_as_viewed, delete_audit, get_audit_by_id

API_TOKEN = "7616949917:AAGa_wr563cBlUiDjsfhECIg67Gvgabu6x8"  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMINS = [649229459,414108537]  # —Å—é–¥–∞ —Å–≤–æ–∏ ID –∞–¥–º–∏–Ω–æ–≤

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# =======================
# FSM –¥–ª—è –∞—É–¥–∏—Ç–∞
# =======================
class AuditForm(StatesGroup):
    channel = State()
    subscribers = State()
    goal = State()


# =======================
# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# =======================
def get_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    keyboard = [
        [
            KeyboardButton(text="üîç –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω"),
            KeyboardButton(text="üìù –ü–ª–∞–Ω")
        ],
        [
            KeyboardButton(text="üìà –ó–∞–ø—É—Å–∫"),
            KeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å")
        ],
        [
            KeyboardButton(text="üí∞ –¶–µ–Ω–∞")
        ]
    ]

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if user_id in ADMINS:
        keyboard.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


# =======================
# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
# =======================
async def set_commands():
    from aiogram.types import BotCommand
    commands = []
    await bot.set_my_commands(commands)


# =======================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
# =======================
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø ‚Äî –±–æ—Ç –∫–∞–Ω–∞–ª–∞ @channelUP.\n–ü–æ–º–æ–≥–∞—é –∞–≤—Ç–æ—Ä–∞–º –≤—ã—Ä–∞—Å—Ç–∏ —Å 0 –¥–æ 10K+ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã.",
        reply_markup=get_main_menu(message.from_user.id),
    )


@dp.message(F.text == "üí∞ –¶–µ–Ω–∞")
async def cmd_price(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        """–§–∏–∫—Å–∞ (1000‚Äì1500 —Ä—É–±)‚Äî –∑–∞ —Å—Ç–∞—Ä—Ç:  
‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –∞—É–¥–∏—Ç –∫–∞–Ω–∞–ª–∞  
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏  
‚Ä¢ –ü–æ–∏—Å–∫ —Ç–æ—á–µ–∫ —Ä–æ—Å—Ç–∞ –±–µ–∑ –±—é–¥–∂–µ—Ç–∞  

–ü—Ä–æ—Ü–µ–Ω—Ç (30‚Äì50%)‚Äî –æ—Ç –≤—Å–µ—Ö –¥–æ—Ö–æ–¥–æ–≤:  
‚Äî –†–µ–∫–ª–∞–º–∞, –ø–∞—Ä—Ç–Ω—ë—Ä–∫–∏, –ø–æ–¥–ø–∏—Å–∫–∏  

–ü–æ—á–µ–º—É —Ç–∞–∫?  
‚úì –¢—ã –≤–∏–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –æ–ø–ª–∞—Ç—ã ‚Äî —Ñ–∏–∫—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å  
‚úì –Ø –≤–∫–ª–∞–¥—ã–≤–∞—é –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–µ–∫—Ç—ã  
‚úì –¢—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É  

–•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —ç—Ç–æ?  
–ù–∞–ø–∏—à–∏ ¬´–°—Ç–∞—Ä—Ç¬ª ‚Äî —Å–¥–µ–ª–∞—é –∞—É–¥–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ.  
–ï—Å–ª–∏ –∫–∞–Ω–∞–ª –∏–º–µ–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.  

P.S. –§–∏–∫—Å–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –Ω–æ —è –±–µ—Ä—É –µ—ë —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ. –ü–æ—Ç–æ–º—É —á—Ç–æ –º–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ –¥–æ—Ö–æ–¥–∞."""
    )


@dp.message(F.text == "üìù –ü–ª–∞–Ω")
async def cmd_plan(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üìù –ó–∞–≥–ª—É—à–∫–∞")


@dp.message(F.text == "üìà –ó–∞–ø—É—Å–∫")
async def cmd_launch(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        """üöÄ –ó–∞–ø—É—Å–∫ —Ä–æ—Å—Ç–∞

–ù–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ —Ä–∞—Å—Ç–∏.  
–Ø –∑–∞–ø—É—â—É –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –∑–∞ —Ç–µ–±—è.

–ß—Ç–æ —Å–¥–µ–ª–∞—é:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –∫–∞–Ω–∞–ª
2. –ù–∞–π–¥—É 2‚Äì3 –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫—Ä–æ—Å—Å–∞
3. –°–≤—è–∂—É—Å—å —Å –∞–≤—Ç–æ—Ä–∞–º–∏
4. –î–æ–≥–æ–≤–æ—Ä—é—Å—å –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

–¢—ã –ø–æ–ª—É—á–∏—à—å –∂–∏–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚Äî –±–µ–∑ –±—é–¥–∂–µ—Ç–∞.

–•–æ—á–µ—à—å? –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å"

–ó–∞–ø—É—Å–∫–∞–µ–º."""  
    )


@dp.message(F.text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å")
async def cmd_contact(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–•–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ? ü§ù\n\n"
        "–ü–∏—à–∏ –ø—Ä–æ–¥—é—Å–µ—Ä—É: @—Ç–≤–æ–π_–Ω–∏–∫\n"
        "(–æ—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è)\n\n"
        "P.S. –†–∞–±–æ—Ç–∞—é –∑–∞ % –æ—Ç –ø—Ä–∏–±—ã–ª–∏ –∫–∞–Ω–∞–ª–∞."
    )


@dp.message(F.text == "üîç –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω")
async def cmd_audit(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ!\n–°–¥–µ–ª–∞—é –ø–ª–∞–Ω –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –ø–æ–¥ —Ç–≤–æ–π –∫–∞–Ω–∞–ª.\n\n–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø–æ–ª–Ω–∏ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É:\n"
        "1. –ù–∞–ø–∏—à–∏ @—Å–≤–æ–π_–∫–∞–Ω–∞–ª ‚úçÔ∏è"
    )
    await state.set_state(AuditForm.channel)


# =======================
# FSM: —à–∞–≥–∏ –∞—É–¥–∏—Ç–∞
# =======================
@dp.message(StateFilter(AuditForm.channel))
async def process_channel(message: Message, state: FSMContext):
    await state.update_data(channel=message.text)
    await message.answer("2. –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤?")
    await state.set_state(AuditForm.subscribers)


@dp.message(StateFilter(AuditForm.subscribers))
async def process_subs(message: Message, state: FSMContext):
    await state.update_data(subscribers=message.text)
    await message.answer("3. –ö–∞–∫–∞—è —Ü–µ–ª—å? (–†–æ—Å—Ç / –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è)")
    await state.set_state(AuditForm.goal)


@dp.message(StateFilter(AuditForm.goal))
async def process_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text)
    data = await state.get_data()

    await save_audit(
        user_id=message.from_user.id,
        username=message.from_user.username or "unknown",
        channel=data.get('channel', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
        subscribers=data.get('subscribers', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
        goal=data.get('goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    )

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    notify_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or 'unknown'}\n"
        f"üìå –ö–∞–Ω–∞–ª: {data.get('channel')}\n"
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {data.get('subscribers')}\n"
        f"üéØ –¶–µ–ª—å: {data.get('goal')}"
    )
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, notify_text)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\n\n"
        f"üìå –ö–∞–Ω–∞–ª: {data.get('channel')}\n"
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {data.get('subscribers')}\n"
        f"üéØ –¶–µ–ª—å: {data.get('goal')}\n\n"
        "–ß–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞ –ø—Ä–∏—à–ª—é –æ—Ç—á—ë—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",
        reply_markup=get_main_menu(message.from_user.id),
    )
    await state.clear()


# =======================
# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# =======================
@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω")
async def cmd_admin(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", callback_data="show_audits")]
        ]
    )
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)


@dp.callback_query(F.data == "show_audits")
async def cb_show_audits(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    audits = await get_all_audits()
    if not audits:
        return await callback.message.edit_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫.")

    text = "üìã –ó–∞—è–≤–∫–∏:\n\n"
    kb = []
    for idx, (id_, user_id, username, channel, subscribers, goal, viewed) in enumerate(audits, start=1):
        text += f"{idx}. @{username}\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞: {'‚úÖ' if viewed else '‚ùå'}\n---\n"
        kb.append([
            InlineKeyboardButton(text=f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å {idx}", callback_data=f"view_{id_}"),
            InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {idx}", callback_data=f"del_{id_}")
        ])
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text(text, reply_markup=markup)


@dp.callback_query(F.data.startswith("view_"))
async def cb_view_audit(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    audit_id = int(callback.data.split("_")[1])
    audit = await get_audit_by_id(audit_id)
    if not audit:
        return await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    _, user_id, username, channel, subscribers, goal, viewed = audit
    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"üìå –ö–∞–Ω–∞–ª: {channel}\n"
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers}\n"
        f"üéØ –¶–µ–ª—å: {goal}\n"
        f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞: {'‚úÖ' if viewed else '‚ùå'}"
    )
    await callback.message.answer(text, reply_markup=get_main_menu(callback.from_user.id))
    await mark_as_viewed(audit_id)
    await callback.answer()


@dp.callback_query(F.data.startswith("del_"))
async def cb_delete_audit(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    audit_id = int(callback.data.split("_")[1])
    await delete_audit(audit_id)
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
    await cb_show_audits(callback)


# =======================
# –ü—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# =======================
@dp.message()
async def catch_all(message: Message, state: FSMContext):
    current = await state.get_state()
    text = message.text or ""

    if current is None and not text.startswith("/"):
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –í–∞—à—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.",
            reply_markup=get_main_menu(message.from_user.id),
        )


# =======================
# –ó–∞–ø—É—Å–∫
# =======================
async def main():
    await init_db()
    await set_commands()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())